var CACHE_STATIC_NAME="static-v1a",staticCacheAssets=["/","index.html","main.min.js"];function networkElseCache(a){return caches.match(a.request).then(function(b){return b?fetch(a.request).then(function(b){caches.open(CACHE_STATIC_NAME).then(function(c){return c.put(a.request,b.clone()),b})||b}):fetch(a.request)})}self.addEventListener("install",a=>{"only-if-cached"===e.request.cache&&"same-origin"!==e.request.mode||a.waitUntil(caches.open(CACHE_STATIC_NAME).then(function(a){return console.log("[Service Worker] Precaching App Shell"),a.addAll(staticCacheAssets).catch(function(a){console.warn("Error with",a)})}))}),self.addEventListener("activate",a=>(a.waitUntil(caches.keys().then(function(a){return Promise.all(a.map(function(a){if(a!==CACHE_STATIC_NAME)return console.log("[Service Worker] Removing old cache.",a),caches.delete(a)}))})),self.clients.claim())),self.addEventListener("fetch",function(a){"only-if-cached"===e.request.cache&&"same-origin"!==e.request.mode||"GET"!==a.request.method||(-1!==staticCacheAssets.indexOf(a.request.url)&&a.respondWith(networkElseCache(a)),a.respondWith(fetch(a.request)))});